# -*- coding: utf-8 -*-
"""Assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCZrhiOuvYY9NMrqAUZcss7jac2U6E8r
"""

import pandas as pd
import numpy as np
#from numpy.random import permutation
import matplotlib.pyplot as plt
import seaborn as sns
#from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
sns.set()

url = 'https://raw.githubusercontent.com/Shivam-2027/MLAS1.github.io/master/auto-mpg.data'

df = pd.read_table(url, sep = '\s+', header = 0, names = ['mpg', 'cyl', 'disp', 'hp', 'weight', 'acc', 'year', 'origin', 'name'])

df.head()

epochs = 15000

# The number of iterations to perform gradient descent
# Number of elements in X 

df = df[df['hp'] != '?']

X = df['acc'].astype(float)
Y = df['hp'].astype(float)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
train_test_split(Y, shuffle = False)
print(X, '\n', Y)

#ax = sns.scatterplot(X, Y)
M = len(X_train)
gamma = 0.003 # Learning Rate
a = 1
b = 1
obj_f = []
#while_count = 0    
for t in range(0, epochs):
    Y_pred = a * X_train + b
        
    obj_f.append((1 / M) * np.sum(np.square(Y_train - Y_pred)))
    f_a = (-2 / M) * np.sum((Y_train - Y_pred) * X_train)
    f_b = (-2 / M) * np.sum(Y_train - Y_pred)
        
    a = a - gamma * f_a
    b = b - gamma * f_b

M = len(X_test)
gamma = 0.003 # Learning Rate
a = 1
b = 1
obj_f = []
r2Error = []
#while_count = 0    
for t in range(0, epochs):
    Y_pred = a * X_test + b
    
    obj_f.append((1 / M) * np.sum(np.square(Y_test - Y_pred)))
    print(r2_score(Y_test, Y_pred))
    r2Error.append(r2_score(Y_test, Y_pred))
    f_a = (-2 / M) * np.sum((Y_test - Y_pred) * X_test)
    f_b = (-2 / M) * np.sum(Y_test - Y_pred)
        
    a = a - gamma * f_a
    b = b - gamma * f_b



Y_pred = a*X_test + b
plt.figure(1)
plt.scatter(X_test, Y_test)
plt.plot(X_test, Y_pred, 'r-')
plt.title('Hp vs Mpg')
plt.xlabel('Miles per gallon')
plt.ylabel('Horse Power')
plt.show()

plt.figure(2)
plt.title('R^2 vs Iterations')
plt.ylabel('R^2 value')
plt.xlabel('Iterations')
plt.plot(r2Error)

plt.figure(3)
plt.title('Mean Squared Error vs Iterations')
plt.ylabel('Mean Squared Error')
plt.xlabel('Iterations')
plt.plot(obj_f)